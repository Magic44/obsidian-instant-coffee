/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var f=(s,t)=>{for(var e in t)m(s,e,{get:t[e],enumerable:!0})},x=(s,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of C(t))!S.call(s,n)&&n!==e&&m(s,n,{get:()=>t[n],enumerable:!(i=E(t,n))||i.enumerable});return s};var k=s=>x(m({},"__esModule",{value:!0}),s);var I={};f(I,{default:()=>g});module.exports=k(I);var a=require("obsidian");function b(s,t){let e=s.replace("#","");if(e.length!==6)throw new Error("Invalid hex color value");let i=parseInt(e.substring(0,2),16),n=parseInt(e.substring(2,4),16),c=parseInt(e.substring(4,6),16);return`rgba(${i}, ${n}, ${c}, ${t})`}var v={mySetting:"default1",highlightColor:"rgba(157, 123, 218, 0.51)"},g=class extends a.Plugin{async onload(){await this.loadSettings(),this.registerMarkdownPostProcessor((o,d)=>{let r=o.querySelector(".internal-query-header"),l=document.createElement("button");l.className="new-sibling-button",l.textContent="\u5C55\u5F00\u5168\u90E8",l.style.marginLeft="30px",l.onclick=w=>{let u=w.target.closest(".el-pre");u&&u.querySelectorAll(".search-result-file-match").forEach(y=>{y.querySelectorAll(".search-result-hover-button")[1].click()})},r&&r.appendChild(l)}),this.registerDomEvent(document,"click",o=>{let r=o.target.closest(".search-result-file-match.tappable");r&&(document.querySelectorAll(".search-result-file-match.tappable.highlighted").forEach(l=>{l.classList.remove("highlighted")}),r.classList.add("highlighted"))});let e=this.settings.highlightColor,n=`
			.search-result-file-match.tappable.highlighted {
				background-color: ${b(e,"0.5")} !important;
				border-radius: 4px;
			}
		`,c=document.createElement("style");c.textContent=n,document.head.appendChild(c),this.addRibbonIcon("dice","Light/Dark Toggle",o=>{}).addClass("my-plugin-ribbon-class"),this.addStatusBarItem().setText("Status Bar Text"),this.addCommand({id:"open-sample-modal-simple",name:"Open sample modal (simple)",callback:()=>{new h(this.app).open()}}),this.addCommand({id:"sample-editor-command",name:"Sample editor command",editorCallback:(o,d)=>{console.log(o.getSelection()),o.replaceSelection("Sample Editor Command")}}),this.addCommand({id:"open-sample-modal-complex",name:"Open sample modal (complex)",checkCallback:o=>{if(this.app.workspace.getActiveViewOfType(a.MarkdownView))return o||new h(this.app).open(),!0}}),this.addSettingTab(new p(this.app,this)),this.registerDomEvent(document,"click",o=>{}),this.registerInterval(window.setInterval(()=>console.log("setInterval"),5*60*1e3))}onunload(){}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},h=class extends a.Modal{constructor(t){super(t)}onOpen(){let{contentEl:t}=this;t.setText("Woah!")}onClose(){let{contentEl:t}=this;t.empty()}},p=class extends a.PluginSettingTab{constructor(e,i){super(e,i);this.plugin=i}display(){let{containerEl:e}=this;e.empty(),new a.Setting(e).setName("Highlight Color").setDesc("It will work when the plugin is reload").addColorPicker(i=>i.setValue(this.plugin.settings.highlightColor).onChange(async n=>{console.log("onChange",n),this.plugin.settings.highlightColor=n,await this.plugin.saveSettings()}))}};
