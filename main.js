/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// utils/utils.ts
function hexToRgba(hex, alpha) {
  let hexValue = hex.replace("#", "");
  if (hexValue.length !== 6) {
    throw new Error("Invalid hex color value");
  }
  let r = parseInt(hexValue.substring(0, 2), 16);
  let g = parseInt(hexValue.substring(2, 4), 16);
  let b = parseInt(hexValue.substring(4, 6), 16);
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default1",
  highlightColor: "rgba(157, 123, 218, 0.51)"
  // 默认颜色
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownPostProcessor((element, context) => {
      const targetElement = element.querySelector(".internal-query-header");
      const newSiblingElement = document.createElement("button");
      newSiblingElement.className = "new-sibling-button";
      newSiblingElement.textContent = "\u5C55\u5F00\u5168\u90E8";
      newSiblingElement.style.marginLeft = "30px";
      newSiblingElement.onclick = (ev) => {
        const target = ev.target;
        const searchResultItem = target.closest(".el-pre");
        if (searchResultItem) {
          const itemList = searchResultItem.querySelectorAll(".search-result-file-match");
          itemList.forEach((item) => {
            const btnList = item.querySelectorAll(".search-result-hover-button");
            btnList[1].click();
          });
        }
        target.style.display = "none";
      };
      targetElement && targetElement.appendChild(newSiblingElement);
    });
    this.registerDomEvent(document, "click", (event) => {
      const target = event.target;
      const searchResultItem = target.closest(".search-result-file-match.tappable");
      if (searchResultItem) {
        document.querySelectorAll(".search-result-file-match.tappable.highlighted").forEach((el) => {
          el.classList.remove("highlighted");
        });
        searchResultItem.classList.add("highlighted");
      }
    });
    const highlightColor = this.settings.highlightColor;
    const rgba = hexToRgba(highlightColor, "0.5");
    const styles = `
			.search-result-file-match.tappable.highlighted {
				background-color: ${rgba} !important;
				border-radius: 4px;
			}
		`;
    const style = document.createElement("style");
    style.textContent = styles;
    document.head.appendChild(style);
    const ribbonIconEl = this.addRibbonIcon("diamond", "Light/Dark Toggle", (evt) => {
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Highlight Color").setDesc("It will work when the plugin is reload").addColorPicker((colorComponent) => colorComponent.setValue(this.plugin.settings.highlightColor).onChange(async (value) => {
      console.log("onChange", value);
      this.plugin.settings.highlightColor = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
